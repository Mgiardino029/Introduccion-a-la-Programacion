program {

    
}

type Persona is record {
    /*
    proposito: modela una persona
    */

    field DNI           //String
    field Domicilio     //String
    field EsDonante     //Booleano
    

}

/*
Ejemplo de como crear una persona
program {

    return(
        Persona(domicilio <- "3"
            dni <- "100"
            esDonante <- True)    
        )

}
*/


unction personaConDomicilio_Dni_EsDonante_(unDomiiclio,unDni,esDonante) {
    /*
    proposito: describe una persona domiciliada en "domicilio" con numero de dni "dni" y "esDonante" es donante
    precondiciones:
    tipo: persona //porque es la expresion que da.
    parametro:
    unDomicilio: domicilio
    unDni: dni
    esDonante: esDonante
    */

    return(persona(domicilio <- unDomicilio,
        dni <- unDni,
        esDonante <- esDonante))
}


/* Ejemplo de llamar a la funcion
program {

    personaConDomicilio_Dni_esDonante_("3", "100", True)

}*/

/*  Ejemplo de pedirque te de solo el dni

program {

    return(dni(persona)

}

*/


// 5.- b

function sonConvivientes_Y_(primeraPersona,segundaPersona) {
    /*
    proposito: indica si "primeraPersona" y "segundaPersona" son convivientes
    precondiciones: ninguna
    tipo: booleana
    parametros:
    primeraPersona: persona
    segundaPersona: persona
    */

    return(domicilio(primeraPersona) == domicilio(segundaPersona))
}

// 5.- C

function personaNacidaDe_(personaMadre) {
    /*
    proposito: describe una persona nacida de "personaMadre"
    precondiciones: ninguna
    parametros:
    personaMadre: persona
    tipo: persona
    */

    return(Persona(domicilio <- personaMadre, dni <- sinAsignar, esDonante <- False))

}



function sinAsignar() {
    /*
    proposito: describe una persona con dni sin asignar
    precondiciones:
    tipo: persona
    */

    return(persona(domicilio <- persona, dni <- " ", esDonante <- persona ))

    
}


function persona_registradaCon_(personaDniSinAsignar,unDni) {
    /*
    prop: describe una persona "persona" registrada con el dni "dni"
    prec: 
    tipo: Persona
    parametros: personaDniSinAsignar
    dni : unDni
    */

    return(personaDniSinAsignar(dni <- unDni))
}

function persona_ConDomicilioNuevoEn_(unaPersona,unDomicilio) {
    /*
    proposito: describe una persona "unaPersona" con domicilio nuevo en "unDomicilio*/
}

return(Persona(unaPErsona|domicilio <- unDomicilio))


/*

forma facil de describir empleado solo cambiandole un dato:

return(Empleado(empleado|sueldo <- unSuelto)*/