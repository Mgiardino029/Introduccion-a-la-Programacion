program {

}

   /*
    
    consignas:

    cada celula representa una celda :
    bolita verde celula viva
    bolita ninguna verde celula muerta
    celula vecina en lindantes y diagonales

    ------------------------------------------------------------------------------------------------------------------------------------------

    * Es viva si tiene al menos 2 vecinas vivas escasez
 
    * Si tiene mas de 3 vecinas vivas,muere sobre
    
    * Toda celula viva con 2 o 3 vecinas viva pasa a la siguiente generacion

    * Toda celula viva con exactamente 3 vecinas vivas se convierte en celula viva 

    ------------------------------------------------------------------------------------------------------------------------------------------

    Ejercicio   1) Escribir la función esCélulaViva(), que indica si la célula en la celda actual está viva o no.               // retorna
    
    Ejercicio   2) Escribir la función nroDeVecinasVivas() que describe el número de células vivas que son vecinas de
                la célula actual.                                                                                               // acumulacion entre vecinas
    
    Ejercicio   3) Escribir PrepararCélulaActual(), que aplique las pautas de juego a la célula actual.                         // transformacion
    
    Ejercicio   4) Escribir CompletarElPróximoTick(), que lee todas las marcas de eliminación/reanimación de
                células y las procesa (es decir, efectivamente elimina/reanima esas células). El resultado será un nuevo universo, en
                condiciones de poder evolucionar en un tick subsiguiente.
    
    Ejercicio   5) Escribir Simular_Ticks(cantidad), que dada una cantidad, simula esa cantidad de ticks sobre el
    
    ------------------------------------------------------------------------------------------------------------------------------------------

    */



function esCelulaViva() {
    /*
    proposito: indica si la celula actual esta viva o no
    precondiciones:
    tipo: Booleana
    Observaciones: la celula actual esta viva si tiene una bolita Verde
    */

    return(hayBolitas(Verde))

}




function nroDeVecinasVivas() {
    /*
    proposito: describe la cantidad de celulas vivas al rededor de la celda actual
    precondiciones: ninguna
    tipo: numero
    Observaciones: 
    */

    return(unoSi_CeroSinoDiagAl_(esCelulaViva(),direccion) + 
            unoSi_CeroSinoDiagAl_(esCelulaViva(),siguiente(direccion))

}

function nroDeVecinasVivasOctogonal() {
    /*
    proposito: describe el numero de vecinas vivas en posicion octogonal de la celda actual
    precondiciones: ninguna
    tipo: numero
    observaciones: un recorrido de acumulacion sobre celulas de un universo, contando la cantidad
    de celulas vivas que hay vecinas octogonales de la celula actual
    */

    celulaActual := minDir()
    cantidadVivasHastaAhora := 0
    while(celulaActual /= maxDir()) {
        calulaActual := siguiente(celulaActual)
        cantidadVivasHastaAhora := cantidadVivasHastaAhora + unoSi_CeroSino(esCelulaViva)
    }
    return(cantidadVivasHastaAhora)

}

function nroDeVecinasVivasDiagonal() {

        /*
    proposito: describe el numero de vecinas vivas en posicion diagonal de la celda actual
    precondiciones: ninguna
    tipo: numero
    observaciones: un recorrido de acumulacion sobre celulas de un universo, contando la cantidad
    de celulas vivas que hay vecinas en diagonal de la celula actual
    */

    celulaActual := minDir()
    cantidadVivasHastaAhora := 0
    while(celulaActual /= maxDir()) {
        calulaActual := DiagonalAl_YAl_(celulaActual, siguiente(celulaActual))
        cantidadVivasHastaAhora := unoSi_CeroSino(esCelulaViva)
    }
    return(cantidadVivasHastaAhora)

}






